class Solution {
public:
    /*
        minimum speed to arive on train 
        dist = {1,3,2}
        hour = 6
        output = 1
        train 1 is covering 1 km time = dist/speed = 1 / 2 = 0.5 
        the time is 0.5 but we can use next train by 1 only we can't travel at decimal hour
        ciel(0.5) = 1
        speed = 2
        dist = 1
        time = 1 / 2 = 0.5 = 1 hour

        dist = 3
        speed = 2
        time = 3 / 2 = 1.5 hour = 2 hour

        dist = 2 
        time = 2/2 = 1

        if we use 2 speed we reach there in 4 hours 
        check for minimum speed

        dist = {1,3,2}
        time = dist / speed

        time = 1/1= 1
        time = 3/1 = 3
        time = 2/1

        min speed = 1 to 10 ^ 7 
        low = 1
        right = 10 ^ 7
        mid = (low + right) / 2;

        mid speed = reached office result = mid speed 
        right = mid - 1
        mid speed = low = mid + 1

        while(left <= right){
            mid = l + (r - l) / 2 ;
            if(possible(dist , mid ) <= hour ){
                result = mid
                right = mid - 1;

            }
            else{
                left = mid + 1;
            }
        }
        return result;
        {1,3,2} ,  speed = 2
        time = 0.0
        for(int i = 0 ; i < n ; i++){
            time = 1 / 2 = 0.5
            ciel(0.5) = 1

            time += ciel(t)

        }
    */
    double possible(vector < int > & dist , int midSpeed){
        double time = 0.0;
        int n = dist.size();
        for(int i = 0 ; i < n - 1; i ++){
            double temp = (double) dist[i] / (double) midSpeed;
            time += ceil(temp );
        }
        time += (double)dist[n - 1] / (double) midSpeed;
        return time;
    }
    int minSpeedOnTime(vector<int>& dist, double hour) {
        int n = dist.size();
        int start = 1;
        int end = 1e7;
        int minSpeed = -1;

        while(start <= end){
            int mid = start + (end - start)/2;

            if(possible(dist , mid) <= hour){
                minSpeed = mid;
                end = mid  - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return minSpeed ;
    }
};
